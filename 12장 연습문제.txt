12장 연습문제

1. 텐서플로를 한다미로 어떻게 정의할 수 있나요? 텐서플로의 주요 특징은 무엇인가요?
인기 있는 딥러닝 라이브러리는 어떤 것이 있나요?
 : 텐서플로는 수치 계산, 특히 대규모 머신러닝에 잘 맞도록 튜닝된 오픈 소스 라이브러리입니다.
라이브러리의 핵심 부분은 넘파이와 비슷하지만 GPU를 지원합니다. 또한 분산 컴퓨팅, 계산
그래프 분석과 최적화 기능을 제공합니다(이식성이 좋은 그래프 포맷 덕분에 하나의 환경에서
텐서플로 모델을 훈련하고 다른 환경에서 실행할 수 있습니다). 후진 모드 자동미분 기반의
최적화 API와 tf.keras, tf.data, tf.image, tf.signal 등과 같은 강력한 API를 제공합니다. 다른 인기
있는 딥러닝 라이브러리는 파이토치, MXNet, 마이크로소프트 코그니티브 툴킷, 시애노, 카페2,
체이너가 있습니다.

2. 텐서플로는 넘파이를 그대로 대체할 수 있나요? 두 라이브러리의 주요 차이점은 무엇인가요?
 : 텐서플로가 넘파이 기능을 대부분 제공하지만 몇 가지 이유로 대체재가 되지는 못합니다.
첫째 모든 함수 이름이 같지 않습니다(예를 들어 tf.reduce_sum()과 np.sum()이 다릅니다). 둘째
일부 함수는 작동 방식이 완전히 같지 않습니다(예를 들어 tf.transpose()는 텐서의 전치 복사본을
만들지만 넘파이의 T 메서드는 실제로 어떤 데이터를 복사하는 것이 아니라 전치된 뷰를 만듭니다).
마지막으로 넘파이 배열은 변경 가능하지만 텐서플로의 텐서는 만든 후 변경하지 못합니다(변경
가능한 객체가 필요하면 tf.Variable을 사용할 수 있습니다).

3. tf.range(10)과 tf.constant(np.arange(10))의 결과는 같나요?
 : 이 둘은 모두 0에서 9까지 정수를 담은 1차원 텐서를 반환합니다. 하지만 전자는 32비트 정수를
사용하고, 후자는 64비트 정수를 사용합니다. 실제로 텐서플로는 32비트가 기본이지만 넘파이는
64비트가 기본입니다.

4. 일반 텐서 외에 텐서플로에서 사용할 수 있는 6가지 다른 데이터 구조는 무엇인가요?
 : 희소 텐서, 텐서 배열, 래그드 텐서, 큐, 문자열 텐서, 집합 등입니다. 마지막 두 개는
사실 일반 텐서로 표현되지만 텐서플로가 이를 조작하기 위한 특별한 함수를 (tf.strings와
tf.sets 안에) 제공합니다.

5. keras.losses.Loss 클래스를 상속하거나 일반 함수를 작성하여 사용자 정의 손실 함수를
정의할 수 있습니다. 언제 사용해야 하나요?
 : 사용자 정의 손실 함수를 정의하려면 일반적으로 일반 파이썬 함수로 구현합니다. 하지만
사용자 정의 손실 함수가 일부 매개변수를 (또는 다른 어떤 상태를) 지원해야 한다면
keras.losses.Loss 클래스를 상속하고 __init__()과 call() 메서드를 구현해야 합니다. 손실 함수의
매개변수를 모델과 함께 저장하려면 get_config() 메서드도 구현해야 합니다.

6. 비슷하게 keras.metrics.Metric 클래스를 상속하거나 함수를 정의하여 지표를 정의할
수 있습니다. 언제 사용해야 하나요?
 : 대부분의 지표는 일반 파이썬 함수로 정의할 수 있습니다. 하지만 사용자 정의 지표가
일부 매개변수를 (또는 다른 어떤 상태를) 지원해야 한다면 keras.metrics.Metirc 클래스를
상속해야 합니다. 또한 한 에포크 전체에 대해 이 지표를 계산하는 것과 에포크 안의 모든
배치에 대해 평균 지표를 계산하는 것이 동일하지 않으면 (예를 들어 정밀도와 재현율)
keras.metrics.Metric 클래스를 상속하고 __init__(), update_state(), result() 메서드를 구현하여
에포크 동안에 변화하는 지푯값을 기록해야 합니다. 또한 변수를 0.0으로 초기화하는 것이
필요하지 않다면 reset_states() 메서드도 구현해야 합니다. 모델과 함께 상태를 저장하려면
get_config() 메서드도 구현해야 합니다.

7. 언제 사용자 정의 층 또는 사용자 정의 모델을 만들어야 하나요?
 : 모델의 내부 구성 요소(즉 층 또는 재사용 가능한 층의 블럭)와 모델 자체(즉 훈련할 대상)
로 구분합니다. 전자는 keras.layers.Layer 클래스를 상속하고 후자는 keras.models.Model
클래스를  상속해야 합니다.

8. 사용자 정의 훈련 반복을 만들어야 하는 경우는 어떤 것이 있나요?
 : 사용자 훈련 반복을 작성하는 것은 매우 고급 기능이기 때문에 정말 필요할 때만 사용해야
합니다. 케라스는 사용자 정의 훈련 반복을 작성하지 않고 훈련을 커스터마이징할 수 있는 여러
도구를 제공합니다. 콜백, 사용자 정의 규제, 사용자 정의 제한, 사용자 정의 손실 등입니다.
가능하다면 사용자 정의 훈련 반복 대신 이런 도구를 사용해야 합니다. 사용자 정의 훈련 반복을
만들면 오류가 발생하기 쉽고 작성한 코드를 재사용하기 어렵습니다. 하지만 일부 경우에는
사용자 정의 반복이 필수적입니다. 예를 들어 와이드 & 딥 논문처럼 신경망의 일부분에 다른
옵티마이저를 사용하는 경우입니다. 사용자 정의 훈련 반복은 디버깅이나 훈련이 어떻게
작동하는지 이해하고 싶을 때 사용할 수도 있습니다.

9. 케라스의 사용자 정의 구성 요소가 임의의 파이썬 코드를 담을 수 있나요? 또는 이 구성
요소를 텐서플로 함수로 바꿀 수 있나요?
 : 사용자 정의 케라스 구성 요소는 텐서플로 함수로 바꿀 수 있어야 합니다. 즉 가능하면
텐서플로 연산만 사용하고 499쪽 '텐서플로 함수 사용 방법'에 나열된 규칙을 따라야 합니다.
사용자 정의 구성 요소에 임의의 파이썬 코드를 넣어야 한다면 tf.py_function() 연산으로
감싸거나(그러나 성능이 감소되고 모델의 이식성에 제약이 생깁니다), 사용자 정의 층이나
모델을 만들 때 dynamic=True로 지정합니다(또는 모델의 compile() 메서드를 호출할 때
run_eagerly=True를 지정합니다).

10. 텐서플로 함수로 바꿀 수 있는 함수를 만든다면 따라야 할 주요 규칙은 무엇인가요?
 : 499쪽 참조

11. 동적인 케라스 모델을 만들어야 할 때는 언제인가요? 어떻게 만들 수 있나요? 왜 전체
모델을 동적으로 만들지 않나요?
 : 동적인 케라스 모델을 만들면 디버깅에 유용합니다. 사용자 정의 구성 요소를 텐서플로 함수로
컴파일하지 않으므로 코드 디버깅을 위해 어떤 파이썬 디버거를 사용할 수 있습니다. 외부
라이브러리를 호출하는 것을 포함해 모델(또는 훈련 코드)에 임의의 파이썬 코드를 넣고 싶을
때도 사용합니다. 동적인 모델을 만들려면 모델을 생성할 때 dynamic=True로 지정해야 합니다.
또는 모델의 compile() 메서드를 호출할 때 run_eagerly=True를 지정합니다. 모델을 동적으로
만들면 케라스가 텐서플로의 그래프 장점을 활용하지 못합니다. 따라서 훈련과 추론 속도가
느려지고 계산 그래프로 내보낼 수 없어 모델의 이식성에 제약이 생깁니다.